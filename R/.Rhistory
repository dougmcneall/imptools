library(devtools)
load_all()
check()
load_all()
load_all()
check()
?mclapply
library(parallel)
?mclapply
load_all()
load_all()
check()
load_all()
check()
install.packages(imptools)
install.packages('imptools')
install.packages("imptools")
library(imnptools)
library(imptools)
document()
install()
library(imptools)
createKmFitList
warnings()
?createKmFitList
?mat2list
load_all()
check()
load_all()
check()
library(imptools)
library(lhs)
library(DiceKriging)
library(emtools)
library(viztools)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(imptools)
library(lhs)
library(DiceKriging)
library(emtools)
library(viztools)
# Friedman
friedman = function(x){
stopifnot(length(x)==4)
out = 10*sin(pi*x[1]*x[2]) + 20*(x[3] - 0.5)^2 + 10*x[4] # + 5*x5
out
}
park1 = function(x){
stopifnot(length(x)==4)
out = x[1]/2 * sqrt( 1+ (x[2]+ (x[3]^2) * (x[4] / x[1]^2))) + x[1] + 3*x[4]*exp(1+sin(x[3]))
out
}
park2 = function(x){
stopifnot(length(x)==4)
out = (2/3 * exp(x[1]+x[2])) - (x[4] *sin(x[3])) + x[3]
out
}
run_model = function(X){
# Generates multivariate output from a design matrix, using
# the friedman, park1 and park2 functions.
# Input is a design matrix with 4 columns on the [0,1] cube
# Output is a 3 column matrix of model output
stopifnot(ncol(X)==4)
n = nrow(X)
Y = matrix(NA, nrow = n, ncol = 3)
colnames(Y) = c('y1', 'y2', 'y3')
for(i in 1:n){
x = X[i, ]
y1 = friedman(x)
y2 = park1(x)
y3 = park2(x)
Y[i, ] = c(y1, y2, y3)
}
Y
}
n = 10 # number of initial design points
k = 4  # number of model inputs
d = 3  # number of model outputs
# simplest method is to choose a subset of the discovered NROY
# points to append to the design
n_app = 10 # number of points to append
X = maximinLHS(n, k = k,dup = 2)
?maximinLHS
n = 10 # number of initial design points
k = 4  # number of model inputs
d = 3  # number of model outputs
# simplest method is to choose a subset of the discovered NROY
# points to append to the design
n_app = 10 # number of points to append
X = maximinLHS(n, k = k,dup = 2)
install.packages('lhs')
install.packages("lhs")
library(lhs)
n = 10 # number of initial design points
k = 4  # number of model inputs
d = 3  # number of model outputs
# simplest method is to choose a subset of the discovered NROY
# points to append to the design
n_app = 10 # number of points to append
X = maximinLHS(n, k = k,dup = 2)
X = maximinLHS(n, k = k,dup = 2)
